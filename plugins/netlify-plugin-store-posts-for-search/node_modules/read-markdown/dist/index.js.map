{"version":3,"sources":["../src/index.js"],"names":["path","options","results","html","paths","promises","map","Promise","all","contents","parsed","data","str","content","toHTML","obj","forEach","key","readMarkdown"],"mappings":";;;;;;;;;;;;;;;;;;;qFAOA,iBAA4BA,IAA5B,EAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCA;AACCC,gBAAS,QADV;AAECC,aAAM;AAFP,SAGIF,OAHJ;AADD;AAAA,aAMmB,sBAAKD,IAAL,CANnB;;AAAA;AAMKI,WANL;AAOKC,cAPL,GAOgBD,MAAME,GAAN,CAAU,gBAAQ;AAChC,cAAO,uBAASN,IAAT,EAAe,MAAf,CAAP;AACA,OAFc,CAPhB;AAAA;AAAA,aAUsBO,QAAQC,GAAR,CAAYH,QAAZ,CAVtB;;AAAA;AAUKI,cAVL;AAWKC,YAXL,GAWcD,SAASH,GAAT,CAAa,eAAO;AAChC,WAAIK,OAAO,0BAAOC,GAAP,CAAX;AACA,WAAGX,QAAQE,IAAR,IAAgBQ,KAAKE,OAAxB,EAAgC;AAC/BF,aAAKE,OAAL,GAAeC,OAAOH,KAAKE,OAAZ,CAAf;AACA;AACD,cAAOF,IAAP;AACA,OANY,CAXd;;AAAA,YAkBIV,QAAQC,OAAR,KAAoB,OAlBxB;AAAA;AAAA;AAAA;;AAAA,uCAmBSQ,MAnBT;;AAAA;AAqBKK,SArBL,GAqBW,EArBX;;AAsBCX,YAAMY,OAAN,CAAc,UAAChB,IAAD,EAAOiB,GAAP,EAAe;AAC5BF,WAAIf,IAAJ,IAAYU,OAAOO,GAAP,CAAZ;AACA,OAFD;AAtBD,uCAyBQF,GAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeG,Y;;;;;AAPf;;AACA;;;;AACA;;;;AACA;;;;IAEQJ,M,sBAAAA,M;kBA8BOI,Y","file":"index.js","sourcesContent":["import { readFile } from 'fs-extra'\nimport matter from 'gray-matter'\nimport glob from 'globby'\nimport { markdown } from 'markdown'\n\nconst { toHTML } = markdown\n\nasync function readMarkdown(path, options){\n\toptions = {\n\t\tresults: 'object',\n\t\thtml: true,\n\t\t...options\n\t}\n\tlet paths = await glob(path)\n\tlet promises = paths.map(path => {\n\t\treturn readFile(path, 'utf8')\n\t})\n\tlet contents = await Promise.all(promises)\n\tlet parsed = contents.map(str => {\n\t\tlet data = matter(str)\n\t\tif(options.html && data.content){\n\t\t\tdata.content = toHTML(data.content)\n\t\t}\n\t\treturn data\n\t})\n\tif(options.results === 'array'){\n\t\treturn parsed\n\t}\n\tlet obj = {}\n\tpaths.forEach((path, key) => {\n\t\tobj[path] = parsed[key]\n\t})\n\treturn obj\n}\n\nexport default readMarkdown"]}